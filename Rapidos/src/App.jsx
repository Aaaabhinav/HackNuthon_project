import { useState, useEffect } from 'react';
import './App.css';
import FunctionalRequirements from './components/FunctionalRequirements';
import BackendCode from './components/BackendCode';
import TestCases from './components/TestCases';
import TestAutomation from './components/TestAutomation';
import FinalPreview from './components/FinalPreview';

// Insert your Figma API key here
const FIGMA_API_KEY = 'figd_IBAmJi0BxWUtMQPcVqfFLGco9eOsjbO8mR380lag';

function App() {
  const [url, setUrl] = useState('');
  const [urlError, setUrlError] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [structureData, setStructureData] = useState(null);
  const [htmlData, setHtmlData] = useState(null);
  const [copySuccess, setCopySuccess] = useState(false);
  const [functionalRequirements, setFunctionalRequirements] = useState([]);
  const [testCases, setTestCases] = useState([]);
  const [activeTab, setActiveTab] = useState('main');

  // Check if we're in a browser environment
  const isBrowser = typeof window !== 'undefined';

  const handleUrlChange = (e) => {
    setUrl(e.target.value);
    if (urlError) setUrlError(false);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      analyzeUrl();
    }
  };

  const isValidUrl = (url) => {
    try {
      new URL(url);
      return true;
    } catch (e) {
      return false;
    }
  };

  const analyzeUrl = () => {
    const trimmedUrl = url.trim();
    
    // Basic URL validation
    if (!isValidUrl(trimmedUrl)) {
      setUrlError(true);
      return;
    }
    
    setUrlError(false);
    setIsLoading(true);
    
    // Simulate async processing
    setTimeout(() => {
      try {
        // Generate some sample data
        const sampleData = generateSampleData(trimmedUrl);
        setStructureData(JSON.stringify(sampleData, null, 2));
        
        // Generate sample HTML
        const sampleHtml = generateSampleHtml(trimmedUrl);
        setHtmlData(sampleHtml);
        
        setIsLoading(false);
      } catch (error) {
        console.error('Error:', error);
        setStructureData(`Error: ${error.message}`);
        setHtmlData(`Error: ${error.message}`);
        setIsLoading(false);
      }
    }, 1500);
  };
  
  const generateSampleData = (url) => {
    return {
      url: url,
      title: "Sample Page Title",
      headings: [
        { level: 1, text: "Main Heading" },
        { level: 2, text: "Subheading 1" },
        { level: 2, text: "Subheading 2" }
      ],
      links: [
        { text: "Home", href: "/" },
        { text: "About", href: "/about" },
        { text: "Contact", href: "/contact" }
      ],
      images: [
        { src: "https://example.com/image1.jpg", alt: "Example image 1" },
        { src: "https://example.com/image2.jpg", alt: "Example image 2" }
      ]
    };
  };
  
  const generateSampleHtml = (url) => {
    return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Generated from ${url}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    header { text-align: center; }
    .container { display: grid; grid-template-columns: 3fr 1fr; gap: 20px; }
    main { background: #f9f9f9; padding: 20px; }
    aside { background: #f0f0f0; padding: 20px; }
  </style>
</head>
<body>
  <header>
    <h1>Sample Page Title</h1>
    <p>Generated from: <a href="${url}">${url}</a></p>
  </header>
  
  <div class="container">
    <main>
      <h1>Main Heading</h1>
      <p>This is sample content generated from the URL.</p>
      <h2>Subheading 1</h2>
      <p>More sample content would go here.</p>
      <h2>Subheading 2</h2>
      <p>Additional content section.</p>
    </main>
    
    <aside>
      <h2>Links</h2>
      <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/about">About</a></li>
        <li><a href="/contact">Contact</a></li>
      </ul>
    </aside>
  </div>
  
  <footer>
    <p>Generated by URL Structure Analyzer</p>
  </footer>
</body>
</html>`;
  };

  const handleCopyHtml = () => {
    if (htmlData && isBrowser && navigator.clipboard) {
      navigator.clipboard.writeText(htmlData)
        .then(() => {
          setCopySuccess(true);
          setTimeout(() => setCopySuccess(false), 2000);
        })
        .catch(err => {
          console.error('Failed to copy: ', err);
        });
    }
  };

  // Handle receiving functional requirements from child component
  const handleRequirementsUpdate = (updatedRequirements) => {
    setFunctionalRequirements(updatedRequirements);
  };

  // Handle receiving test cases from child component
  const handleTestCasesUpdate = (updatedTestCases) => {
    setTestCases(updatedTestCases);
  };

  const highlightJson = (json) => {
    try {
      if (!json) return 'Structure will appear here after analysis';
      
      if (typeof json === 'string' && json.startsWith('Error:')) {
        return <div className="text-danger">{json}</div>;
      }
      
      // For now, just format it as a pre
      return <pre>{json}</pre>;
    } catch (error) {
      console.error('Error highlighting JSON:', error);
      return <pre>{json}</pre>;
    }
  };

  const highlightHtml = (html) => {
    if (!html) return 'HTML will appear here after analysis';
    
    if (typeof html === 'string' && html.startsWith('Error:')) {
      return <div className="text-danger">{html}</div>;
    }
    
    // For now, just format it as a pre
    return <pre>{html}</pre>;
  };

  return (
    <div className="app-container">
      <header className="app-header">
        <h1>Design Deployer</h1>
        <p className="app-lead">Extract structure and generate HTML from any URL (including Figma designs)</p>
        <nav className="app-nav">
          <ul className="nav-tabs">
            <li 
              className={`nav-item ${activeTab === 'main' ? 'active' : ''}`}
              onClick={() => setActiveTab('main')}
            >
              Main
            </li>
            <li 
              className={`nav-item ${activeTab === 'requirements' ? 'active' : ''}`}
              onClick={() => setActiveTab('requirements')}
            >
              Requirements
            </li>
            <li 
              className={`nav-item ${activeTab === 'backend' ? 'active' : ''}`}
              onClick={() => setActiveTab('backend')}
            >
              Backend
            </li>
            <li 
              className={`nav-item ${activeTab === 'tests' ? 'active' : ''}`}
              onClick={() => setActiveTab('tests')}
            >
              Tests
            </li>
            <li 
              className={`nav-item ${activeTab === 'preview' ? 'active' : ''}`}
              onClick={() => setActiveTab('preview')}
            >
              Preview
            </li>
          </ul>
        </nav>
      </header>

      <div className="main-content">
        {activeTab === 'main' && (
          <>
            <div className="input-section">
              <div className="card">
                <div className="card-body">
                  <h5 className="card-title">Enter URL</h5>
                  <div className="input-group">
                    <input 
                      type="text" 
                      id="figmaUrl" 
                      className="form-control" 
                      placeholder="https://example.com or https://www.figma.com/file/..." 
                      value={url}
                      onChange={handleUrlChange}
                      onKeyPress={handleKeyPress}
                    />
                    <button 
                      className="btn btn-primary" 
                      type="button" 
                      onClick={analyzeUrl}
                    >
                      Analyze
                    </button>
                  </div>
                  <small className="text-muted">Enter any URL. For Figma designs, use format: figma.com/file_type/file_key/file_name</small>
                  {urlError && <div className="url-error">Please enter a valid URL</div>}
                  {isLoading && (
                    <div className="loading-indicator">
                      <div className="spinner"></div>
                      <p>Analyzing URL...</p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            <div className="output-section">
              <div className="output-row">
                <div className="card structure-card">
                  <div className="card-header">
                    <h5>Structure</h5>
                  </div>
                  <div className="card-body">
                    <div className="output-container">
                      {!structureData && !isLoading && (
                        <div className="placeholder-text">Structure will appear here after analysis</div>
                      )}
                      {isLoading && (
                        <div className="placeholder-text">Analyzing...</div>
                      )}
                      {structureData && highlightJson(structureData)}
                    </div>
                  </div>
                </div>
                
                <div className="card html-card">
                  <div className="card-header">
                    <h5>Generated HTML</h5>
                  </div>
                  <div className="card-body">
                    <div className="output-container">
                      {!htmlData && !isLoading && (
                        <div className="placeholder-text">HTML will appear here after analysis</div>
                      )}
                      {isLoading && (
                        <div className="placeholder-text">Generating HTML...</div>
                      )}
                      {htmlData && highlightHtml(htmlData)}
                    </div>
                    {htmlData && (
                      <button 
                        className="btn btn-outline-primary copy-btn"
                        onClick={handleCopyHtml}
                      >
                        {copySuccess ? 'Copied!' : 'Copy HTML'}
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </>
        )}

        {activeTab === 'requirements' && (
          <div className="requirements-container">
            <FunctionalRequirements 
              structureData={structureData} 
              htmlData={htmlData}
              onRequirementsUpdate={handleRequirementsUpdate}
            />
          </div>
        )}

        {activeTab === 'backend' && (
          <div className="backend-container">
            <BackendCode 
              functionalRequirements={functionalRequirements}
              structureData={structureData}
              htmlData={htmlData}
            />
          </div>
        )}

        {activeTab === 'tests' && (
          <div className="tests-container">
            <TestCases 
              functionalRequirements={functionalRequirements}
              onTestCasesUpdate={handleTestCasesUpdate}
            />
            <TestAutomation testCases={testCases} />
          </div>
        )}

        {activeTab === 'preview' && (
          <div className="preview-container">
            <FinalPreview 
              structureData={structureData}
              htmlData={htmlData}
              functionalRequirements={functionalRequirements}
              testCases={testCases}
            />
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
